// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RonWeb.Database.MySql.RonWeb.DataBase;

#nullable disable

namespace RonWeb.Database.Migrations
{
    [DbContext(typeof(RonWebDbContext))]
    [Migration("20240927073106_增加專案經歷、代碼類型、代碼表、專案角色表")]
    partial class 增加專案經歷代碼類型代碼表專案角色表
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.Article", b =>
                {
                    b.Property<long>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PreviewContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CategoryId");

                    b.ToTable("ArticleCategory");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleImage", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleImage");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleLabel", b =>
                {
                    b.Property<long>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LabelId");

                    b.ToTable("ArticleLabel");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleLabelMapping", b =>
                {
                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("LabelId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ArticleId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("ArticleLabelMapping");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticlePrevImage", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlePrevImage");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleReferences", b =>
                {
                    b.Property<long>("ArticleReferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ArticleReferencesId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleReferences");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.Code", b =>
                {
                    b.Property<string>("CodeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodeTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CodeId");

                    b.HasIndex("CodeTypeId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.CodeType", b =>
                {
                    b.Property<string>("CodeTypeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodeTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CodeTypeId");

                    b.ToTable("CodeTypes");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ExceptionLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.HasKey("LogId");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ProjectExperience", b =>
                {
                    b.Property<int>("ProjectExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contributions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProjectExperienceId");

                    b.ToTable("ProjectExperience");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ProjectRole", b =>
                {
                    b.Property<int>("ProjectExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProjectExperienceId", "RoleId");

                    b.ToTable("ProjectRole");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.RefreshTokenLog", b =>
                {
                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RefreshToken", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokenLog");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.TechnologyTool", b =>
                {
                    b.Property<int>("ProjectExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("TechnologyToolId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UpdateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProjectExperienceId", "TechnologyToolId");

                    b.ToTable("TechnologyTool");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.UserMain", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("UserMain");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.Article", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.ArticleCategory", "ArticleCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleCategory");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleImage", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleLabelMapping", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.Article", "Article")
                        .WithMany("ArticleLabelMapping")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.ArticleLabel", "ArticleLabel")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ArticleLabel");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticlePrevImage", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ArticleReferences", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.Article", "Article")
                        .WithMany("ArticleReferences")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.Code", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.CodeType", "CodeType")
                        .WithMany("Codes")
                        .HasForeignKey("CodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeType");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ProjectRole", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.ProjectExperience", "ProjectExperience")
                        .WithMany("ProjectRole")
                        .HasForeignKey("ProjectExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectExperience");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.RefreshTokenLog", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.UserMain", "UserMain")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserMain");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.TechnologyTool", b =>
                {
                    b.HasOne("RonWeb.Database.MySql.RonWeb.Table.ProjectExperience", "ProjectExperience")
                        .WithMany("TechnologyTool")
                        .HasForeignKey("ProjectExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectExperience");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.Article", b =>
                {
                    b.Navigation("ArticleLabelMapping");

                    b.Navigation("ArticleReferences");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.CodeType", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("RonWeb.Database.MySql.RonWeb.Table.ProjectExperience", b =>
                {
                    b.Navigation("ProjectRole");

                    b.Navigation("TechnologyTool");
                });
#pragma warning restore 612, 618
        }
    }
}
