kind: pipeline
type: docker
name: default

workspace:
  base: /src
  path: ron_web_api

steps:
  - name: install-package
    image: mcr.microsoft.com/dotnet/sdk:7.0
    commands:
      - dotnet restore "RonWeb.API/RonWeb.API.csproj"
      - dotnet restore "RonWeb.Database/RonWeb.Database.csproj"
      - dotnet restore "RonWeb.Core/RonWeb.Core.csproj"
  - name: build
    image: mcr.microsoft.com/dotnet/sdk:7.0
    commands:
      - mkdir RonWeb-API
      - dotnet build "RonWeb.API/RonWeb.API.csproj" -c Release -o RonWeb-API
  - name: zip
    image: node:16
    commands:
      - apt-get update && apt-get -y install zip
      - zip -r RonWeb-API.zip RonWeb-API
    when:
      branch:
        - main
      event:
        - push
  - name: artifact
    image: appleboy/drone-scp
    settings:
      host:
        from_secret: SCP_HOST
      username:
        from_secret: SCP_USER
      password:
        from_secret: SCP_PWD
      port: 22
      overwrite: true
      rm: true
      target: /file-server/RonWeb-API
      source: RonWeb-API.zip
    when:
      branch:
        - main
      event:
        - push
  - name: artifact upload finish
    image: node:16
    commands:
      - echo -e "\n
        ====================================================================\n
        âœ… fileUpload artifact in https://file-server.ronwebs.com/RonWeb-API\n
        ===================================================================="
    when:
      branch:
        - main
      event:
        - push
  - name: docker build && push
    image: plugins/docker
    settings:
      repo: pzps94038/ron-web-api
      username: pzps94038
      password:
        from_secret: DOCKER_PWD
      no_cache: true
      tags:
        - latest
        - main
    when:
      branch:
        - main
      event:
        - push
  - name: deploy
    image: appleboy/drone-ssh
    environment:
      AESIV:
        from_secret: AESIV
      AESKEY:
        from_secret: AESKEY
      AUDIENCE:
        from_secret: AUDIENCE
      ERROR_LOG_EMAIL_ADDRESS:
        from_secret: ERROR_LOG_EMAIL_ADDRESS
      GMAIL_ADDRESS:
        from_secret: GMAIL_ADDRESS
      GMAIL_DISPLAY_NAME:
        from_secret: GMAIL_DISPLAY_NAME
      GMAIL_PWD:
        from_secret: GMAIL_PWD
      GMAIL_SENDER_EMAIL:
        from_secret: GMAIL_SENDER_EMAIL
      ISSUER:
        from_secret: ISSUER
      JWTKEY:
        from_secret: JWTKEY
      ORIGINS:
        from_secret: ORIGINS
      RE_CAPTCHA_SERVER_TOKEN:
        from_secret: RE_CAPTCHA_SERVER_TOKEN
      RON_WEB_MONGO_DB_CONSTR:
        from_secret: RON_WEB_MONGO_DB_CONSTR
      RON_WEB_MYSQL_DB_CONSTR:
        from_secret: RON_WEB_MYSQL_DB_CONSTR
      STORAGE_BUCKET:
        from_secret: STORAGE_BUCKET
      RON_WEB_REDIS_DB_CONSTR:
        from_secret: RON_WEB_REDIS_DB_CONSTR
    settings:
      host:
        from_secret: SCP_HOST
      username:
        from_secret: SCP_USER
      password:
        from_secret: SCP_PWD
      port: 22
      command_timeout: 2m
      envs:
        - AESIV
        - AESKEY
        - AUDIENCE
        - ERROR_LOG_EMAIL_ADDRESS
        - GMAIL_ADDRESS
        - GMAIL_DISPLAY_NAME
        - GMAIL_PWD
        - GMAIL_SENDER_EMAIL
        - ISSUER
        - JWTKEY
        - ORIGINS
        - RE_CAPTCHA_SERVER_TOKEN
        - RON_WEB_MONGO_DB_CONSTR
        - RON_WEB_MYSQL_DB_CONSTR
        - STORAGE_BUCKET
        - RON_WEB_REDIS_DB_CONSTR
      script:
        - docker stop ron-web-api || true &&
          docker rm ron-web-api || true &&
          docker run -d -p 8081:80 --name ron-web-api --restart=always --pull=always
          -v /Logs/Ron-Web-API:/app/Logs
          -e AESIV="$AESIV"
          -e AESKEY="$AESKEY"
          -e AUDIENCE="$AUDIENCE"
          -e ERROR_LOG_EMAIL_ADDRESS="$ERROR_LOG_EMAIL_ADDRESS"
          -e GMAIL_ADDRESS="$GMAIL_ADDRESS"
          -e GMAIL_DISPLAY_NAME="$GMAIL_DISPLAY_NAME"
          -e GMAIL_PWD="$GMAIL_PWD"
          -e GMAIL_SENDER_EMAIL="$GMAIL_SENDER_EMAIL"
          -e ISSUER="$ISSUER"
          -e JWTKEY="$JWTKEY"
          -e ORIGINS="$ORIGINS"
          -e RE_CAPTCHA_SERVER_TOKEN="$RE_CAPTCHA_SERVER_TOKEN"
          -e RON_WEB_MONGO_DB_CONSTR="$RON_WEB_MONGO_DB_CONSTR"
          -e RON_WEB_MYSQL_DB_CONSTR="$RON_WEB_MYSQL_DB_CONSTR"
          -e STORAGE_BUCKET="$STORAGE_BUCKET"
          -e RON_WEB_REDIS_DB_CONSTR="$RON_WEB_REDIS_DB_CONSTR"
          -e PORT=80
          pzps94038/ron-web-api:latest
    when:
      branch:
        - main
      event:
        - push

trigger:
  branch:
    - main
    - develop
  event:
    - push
    - pull_request
    - tag
---
kind: pipeline
type: docker
name: notify

clone:
  disable: true

steps:
  - name: notify
    image: drillster/drone-email
    settings:
      host: smtp.gmail.com
      username:
        from_secret: GMAIL_SENDER_EMAIL
      password:
        from_secret: GMAIL_PWD
      from:
        from_secret: GMAIL_SENDER_EMAIL
      recipients_only: true
      recipients:
        - pzps94038@yahoo.com.tw

depends_on:
  - default

trigger:
  status:
    - success
    - failure
  branch:
    - main
  event:
    - push
