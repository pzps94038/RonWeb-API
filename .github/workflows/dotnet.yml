# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore RonWeb.API
      run: dotnet restore "RonWeb.API/RonWeb.API.csproj"
    - name: Restore RonWeb.Database
      run: dotnet restore "RonWeb.Database/RonWeb.Database.csproj"
    - name: Restore RonWeb.Core
      run: dotnet restore "RonWeb.Core/RonWeb.Core.csproj"
    - name: Build
      run: dotnet build "RonWeb.API/RonWeb.API.csproj" -c Release -o --no-restore
    - name: Create directory
      if: github.ref == 'refs/heads/main'
      run: mkdir dist
    - name: Publish
      if: github.ref == 'refs/heads/main'
      run: dotnet publish "RonWeb.API/RonWeb.API.csproj" -c Release -o dist
    - name: Upload build artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v2
      with:
        name: RonWeb.API
        path: dist
        retention-days: 1
    - name: Deploy Heroku
      if: github.ref == 'refs/heads/main'
      uses: akhileshns/heroku-deploy@v3.12.13
      with:
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        stack: "container"
        usedocker: true
        docker_build_args: |
          RON_WEB_MONGO_DB_CONSTR
          ORIGINS
          JWTKEY
          ISSUER
          AUDIENCE
          AESIV
          AESKEY
      env:
        RON_WEB_MONGO_DB_CONSTR: ${{ secrets.RON_WEB_MONGO_DB_CONSTR }}
        ORIGINS: ${{ secrets.ORIGINS }}
        JWTKEY: ${{ secrets.JWTKEY }}
        ISSUER: ${{ secrets.ISSUER }}
        AUDIENCE: ${{ secrets.AUDIENCE }}
        AESIV: ${{ secrets.AESIV }}
        AESKEY: ${{ secrets.AESKEY }}
